{"version":3,"sources":["webpack://deriv-com/./src/common/validation.js","webpack://deriv-com/./src/pages/reset-password/index.js"],"names":["validation_regex","email","validation","input","test","localize","StyledContainer","styled","Container","ButtonContainer","InputGroup","StyledButton","Button","resetValidation","values","errors","email_error","trimSpaces","resetSubmission","actions","binary_socket","BinarySocketBase","onopen","send","JSON","stringify","verify_email","type","onmessage","msg","response","parse","data","setSubmitting","error","setStatus","message","resetForm","success","close","WithIntl","margin_top","title","description","no_index","justify","align","direction","as","mt","weight","mb","initialValues","initialStatus","validate","onSubmit","handleChange","handleBlur","isSubmitting","status","noValidate","id","name","value","handleError","onChange","onBlur","autoComplete","label","background","placeholder","data-lpignore","required","color","tertiary","onClick","Login","secondary","disabled"],"mappings":"2HAEMA,EAAmB,CACrBC,MAAO,qDAGLC,EAAa,CAEfD,MAAO,SAACE,GACJ,OAAKA,EAEOH,EAAiBC,MAAMG,KAAKD,GAG7B,MAFAE,QAAS,0BAFTA,QAAS,uBAS5B,O,gLCNMC,GAAkBC,QAAOC,MAAV,sFAAGD,CAAH,0EAOfE,EAAkBF,oBAAH,2EAAGA,CAAH,sBAIfG,EAAaH,oBAAH,sEAAGA,CAAH,uCAKVI,GAAeJ,QAAOK,MAAV,mFAAGL,CAAH,2BAIZM,EAAkB,SAACC,GACrB,IAAIC,EAAS,GAEPC,EAAcd,WAAiBe,QAAWH,EAAOb,QAMvD,OAJIe,IACAD,EAAOd,MAAQe,GAGZD,GAGLG,EAAkB,SAACJ,EAAQK,GAC7B,IAAMC,EAAgBC,WAEtBD,EAAcE,OAAS,WACnBF,EAAcG,KACVC,KAAKC,UAAU,CAAEC,cAAcT,QAAWH,EAAOb,OAAQ0B,KAAM,qBAGvEP,EAAcQ,UAAY,SAACC,GACvB,IAAMC,EAAWN,KAAKO,MAAMF,EAAIG,MAChCb,EAAQc,eAAc,GAClBH,EAASI,MACTf,EAAQgB,UAAU,CACdD,MAAOJ,EAASI,MAAME,WAK9BjB,EAAQkB,UAAU,CAAEpC,MAAO,KAC3BkB,EAAQgB,UAAU,CACdG,SAASjC,QACL,oFAGRe,EAAcmB,WAkFtB,WAAeC,SAAf,EA9EsB,kBAClB,gBAAC,IAAD,CAAQb,KAAK,SAASc,WAAY,KAC9B,gBAAC,KAAD,CACIC,OAAOrC,QAAS,0BAChBsC,aAAatC,QACT,6HAEJuC,UAAQ,IAEZ,gBAACtC,EAAD,CAAiBuC,QAAQ,SAASC,MAAM,SAASC,UAAU,UACvD,gBAAC,KAAD,CAAQC,GAAG,KAAKrB,KAAK,aAAamB,MAAM,SAASG,GAAG,SAC/C5C,QAAS,mBAEd,gBAAC,KAAD,CACI2C,GAAG,KACHrB,KAAK,oBACLmB,MAAM,SACNI,OAAO,MACPD,GAAG,SACHE,GAAG,WAEF9C,QAAS,yDAEd,gBAAC,KAAD,CACI+C,cAAe,CAAEnD,MAAO,IACxBoD,cAAe,GACfC,SAAUzC,EACV0C,SAAUrC,IAET,gBACGJ,EADH,EACGA,OACAC,EAFH,EAEGA,OACAyC,EAHH,EAGGA,aACAC,EAJH,EAIGA,WACAC,EALH,EAKGA,aACArB,EANH,EAMGA,UACAsB,EAPH,EAOGA,OAPH,OASG,gBAAC,KAAD,CAAMC,YAAU,GACZ,gBAAClD,EAAD,KACI,gBAAC,KAAD,CACImD,GAAG,QACHC,KAAK,QACL5B,MAAOnB,EAAOd,MACd8D,OAAO9C,QAAWH,EAAOb,OACzB+D,YAAa3B,EACb4B,SAAUT,EACVU,OAAQT,EACRU,aAAa,MACbxC,KAAK,OACLyC,OAAO/D,QAAS,SAChBgE,WAAW,QACXC,YAAa,mBACbC,gBAAc,OACdC,UAAQ,KAGhB,gBAAC,KAAD,CAAM1B,MAAM,SAAS2B,MAAM,OACtBd,EAAOzB,OAASyB,EAAOzB,OAE5B,gBAAC,KAAD,CAAMY,MAAM,SAAS2B,MAAM,SACtBd,EAAOrB,SAAWqB,EAAOrB,SAE9B,gBAAC7B,EAAD,KACI,gBAACE,EAAD,CAAc+D,UAAQ,EAACC,QAASC,oBAAuBjD,KAAK,WACvDtB,QAAS,qBAEd,gBAACM,EAAD,CAAckE,UAAU,OAAOC,SAAUpB,EAAc/B,KAAK,WACvDtB,QAAS","file":"component---src-pages-reset-password-index-js-54104231e7fa6fa77fb5.js","sourcesContent":["import { localize } from 'components/localization'\n\nconst validation_regex = {\n    email: /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,63}$/,\n}\n\nconst validation = {\n    // Validation will return a string for error message\n    email: (input) => {\n        if (!input) {\n            return localize('Email is required')\n        } else if (!validation_regex.email.test(input)) {\n            return localize('Invalid email address')\n        } else {\n            return null\n        }\n    },\n}\n\nexport default validation\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Formik, Form } from 'formik'\nimport Layout from 'components/layout/layout'\nimport { localize, WithIntl } from 'components/localization'\nimport { Container, SEO } from 'components/containers'\nimport { Header, Text } from 'components/elements'\nimport { Input, Button } from 'components/form'\nimport validation from 'common/validation'\nimport { trimSpaces } from 'common/utility'\nimport { BinarySocketBase } from 'common/websocket/socket_base'\nimport Login from 'common/login'\n\nconst StyledContainer = styled(Container)`\n    text-align: center;\n    height: 100vh;\n    padding: auto 0;\n    justify-content: start;\n`\n\nconst ButtonContainer = styled.div`\n    margin-top: 2rem;\n`\n\nconst InputGroup = styled.div`\n    width: 40rem;\n    margin: 0 auto 3.4rem;\n`\n\nconst StyledButton = styled(Button)`\n    margin: 0.8rem 0.4rem;\n`\n\nconst resetValidation = (values) => {\n    let errors = {}\n\n    const email_error = validation.email(trimSpaces(values.email))\n\n    if (email_error) {\n        errors.email = email_error\n    }\n\n    return errors\n}\n\nconst resetSubmission = (values, actions) => {\n    const binary_socket = BinarySocketBase.init()\n\n    binary_socket.onopen = () => {\n        binary_socket.send(\n            JSON.stringify({ verify_email: trimSpaces(values.email), type: 'reset_password' }),\n        )\n    }\n    binary_socket.onmessage = (msg) => {\n        const response = JSON.parse(msg.data)\n        actions.setSubmitting(false)\n        if (response.error) {\n            actions.setStatus({\n                error: response.error.message,\n            })\n            return\n        }\n\n        actions.resetForm({ email: '' })\n        actions.setStatus({\n            success: localize(\n                'Please check your email and click on the link provided to reset your password.',\n            ),\n        })\n        binary_socket.close()\n    }\n}\n\nconst ResetPassword = () => (\n    <Layout type=\"static\" margin_top={'0'}>\n        <SEO\n            title={localize('Reset password | Deriv')}\n            description={localize(\n                'Forgot your Deriv password? Want to reset your password? Send us your email address and weâ€™ll email you the instructions.',\n            )}\n            no_index\n        />\n        <StyledContainer justify=\"center\" align=\"center\" direction=\"column\">\n            <Header as=\"h2\" type=\"page-title\" align=\"center\" mt=\"80px\">\n                {localize('Reset password')}\n            </Header>\n            <Header\n                as=\"h4\"\n                type=\"sub-section-title\"\n                align=\"center\"\n                weight=\"500\"\n                mt=\"0.5rem\"\n                mb=\"3.8rem\"\n            >\n                {localize(\"We'll email you instructions to reset your password.\")}\n            </Header>\n            <Formik\n                initialValues={{ email: '' }}\n                initialStatus={{}}\n                validate={resetValidation}\n                onSubmit={resetSubmission}\n            >\n                {({\n                    values,\n                    errors,\n                    handleChange,\n                    handleBlur,\n                    isSubmitting,\n                    resetForm,\n                    status,\n                }) => (\n                    <Form noValidate>\n                        <InputGroup>\n                            <Input\n                                id=\"email\"\n                                name=\"email\"\n                                error={errors.email}\n                                value={trimSpaces(values.email)}\n                                handleError={resetForm}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                autoComplete=\"off\"\n                                type=\"text\"\n                                label={localize('Email')}\n                                background=\"white\"\n                                placeholder={'example@mail.com'}\n                                data-lpignore=\"true\"\n                                required\n                            />\n                        </InputGroup>\n                        <Text align=\"center\" color=\"red\">\n                            {status.error && status.error}\n                        </Text>\n                        <Text align=\"center\" color=\"green\">\n                            {status.success && status.success}\n                        </Text>\n                        <ButtonContainer>\n                            <StyledButton tertiary onClick={Login.redirectToLogin} type=\"button\">\n                                {localize('Return to log in')}\n                            </StyledButton>\n                            <StyledButton secondary=\"true\" disabled={isSubmitting} type=\"submit\">\n                                {localize('Reset my password')}\n                            </StyledButton>\n                        </ButtonContainer>\n                    </Form>\n                )}\n            </Formik>\n        </StyledContainer>\n    </Layout>\n)\n\nexport default WithIntl()(ResetPassword)\n"],"sourceRoot":""}