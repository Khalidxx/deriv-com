{"version":3,"sources":["webpack:///./src/pages/trader-tools/margin-calculator/_margin-calculator.js","webpack:///./src/pages/trader-tools/margin-calculator/index.js"],"names":["MarginCalculator","data","useStaticQuery","useState","tab","setTab","onTabClick","toFixed","val","parseFloat","toLocaleString","numberSubmitFormat","input","replace","direction","as","type","align","mt","mb","localize","weight","enableReinitialize","initialValues","accountType","margin","marginSymbol","symbol","volume","assetPrice","leverage","optionList","syntheticItemLists","contractSize","validate","values","errors","symbol_error","validation","volume_error","assetPrice_error","leverage_error","onSubmit","setFieldValue","margin_formula","name","getMargin","setFieldError","setFieldTouched","handleBlur","touched","setErrors","resetForm","isValid","dirty","htmlFor","toString","numberWithCommas","jc","tablet","height","active","onClick","disabled","financialItemLists","option_list","label","default_option","optionItemDefault","selected_option","id","onChange","value","currency","market","display_name","slice","getContractSize","error","onBlur","autocomplete","field","autoComplete","handleError","current_input","focus","maxLength","background","leverageItemLists","data-lpignore","secondary","translate_text","components","key","Desktop","alt","Mobile","margin_formula_mobile","tertiary","to","external","target","WithIntl","title","description","ai","color"],"mappings":"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","file":"component---src-pages-trader-tools-margin-calculator-index-js-82ff941f95afc63efac1.js","sourcesContent":["import React, { useState } from 'react'\nimport { Formik, Field } from 'formik'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport {\n    optionItemDefault,\n    leverageItemLists,\n    syntheticItemLists,\n    financialItemLists,\n} from '../common/_underlying-data'\nimport {\n    StyledSection,\n    SectionSubtitle,\n    ContentContainer,\n    FormWrapper,\n    CalculatorForm,\n    CalculatorHeader,\n    CalculatorLabel,\n    CalculatorOutputContainer,\n    CalculatorOutputField,\n    CalculatorOutputSymbol,\n    CalculatorBody,\n    CalculatorTabItem,\n    CalculatorDropdown,\n    InputGroup,\n    CalculateButton,\n    RightContent,\n    TextWrapper,\n    ImageWrapper,\n    FormulaText,\n    StyledOl,\n    LinkWrapper,\n    BottomContent,\n    BottomText,\n    StyledLinkButton,\n} from '../common/_style'\nimport validation from '../common/_validation'\nimport { localize, Localize } from 'components/localization'\nimport { Flex, Show } from 'components/containers'\nimport { Header, Text, QueryImage, Dropdown } from 'components/elements'\nimport Input from 'components/form/input'\n\nconst MarginCalculator = () => {\n    const query = graphql`\n        query {\n            margin_formula: file(relativePath: { eq: \"trade-tools/margin-formula.png\" }) {\n                ...fadeIn\n            }\n            margin_info: file(relativePath: { eq: \"trade-tools/margin-info.png\" }) {\n                ...fadeIn\n            }\n            margin_formula_mobile: file(\n                relativePath: { eq: \"trade-tools/margin-formula-mobile.png\" }\n            ) {\n                ...fadeIn\n            }\n        }\n    `\n    const data = useStaticQuery(query)\n\n    const [tab, setTab] = useState('Synthetic')\n\n    const onTabClick = (tab) => {\n        setTab(tab)\n    }\n\n    const getMargin = (values) => {\n        const { symbol, volume, assetPrice, leverage, contractSize } = values\n        let margin_formula\n        const STEPINDEX_VALUE = 100\n        const RANGEBREAK100VALUE = 400\n        const RANGEBREAK200VALUE = 800\n\n        if (symbol.name === 'Step Index') {\n            margin_formula = volume * STEPINDEX_VALUE\n        } else if (symbol.name === 'Range Break 100 Index') {\n            margin_formula = volume * RANGEBREAK100VALUE\n        } else if (symbol.name === 'Range Break 200 Index') {\n            margin_formula = volume * RANGEBREAK200VALUE\n        } else {\n            margin_formula = (volume * contractSize * assetPrice) / leverage.name\n        }\n\n        return toFixed(margin_formula)\n    }\n\n    const toFixed = (val) => {\n        return parseFloat(val.toFixed(3)).toLocaleString()\n    }\n\n    const resetValidation = (values) => {\n        const errors = {}\n        const symbol_error = validation.symbol(values.symbol)\n        const volume_error = validation.volume(values.volume)\n        const assetPrice_error = validation.assetPrice(values.assetPrice)\n        const leverage_error = validation.leverage(values.leverage)\n\n        if (symbol_error) {\n            errors.symbol = symbol_error\n        }\n        if (volume_error) {\n            errors.volume = volume_error\n        }\n        if (assetPrice_error) {\n            errors.assetPrice = assetPrice_error\n        }\n        if (leverage_error) {\n            errors.leverage = leverage_error\n        }\n\n        return errors\n    }\n\n    const getMarginCurrency = (symbol) => {\n        let currency = 'USD'\n        if (symbol.market === 'synthetic_indices' || symbol.market === 'commodities') {\n            currency = 'USD'\n        }\n\n        if (symbol.name === 'DAX_30') {\n            currency = 'EUR'\n        }\n\n        if (symbol.market === 'forex' && symbol.name !== 'default' && symbol.name !== 'CL_BRENT') {\n            currency = symbol.display_name.slice(-3)\n        }\n\n        return currency\n    }\n\n    const getContractSize = (symbol) => {\n        let contractSize = 1 //crypto falls into this contract size\n\n        if (symbol.market === 'forex') {\n            contractSize = 100000\n        }\n\n        if (symbol.market === 'commodities') {\n            switch (symbol.name) {\n                case 'XAGUSD':\n                    contractSize = 5000\n                    break\n                case 'XAUUSD':\n                case 'XPDUSD':\n                case 'XPTUSD':\n                    contractSize = 100\n                    break\n            }\n        }\n\n        if (symbol.name === 'Step Index') {\n            contractSize = 10\n        }\n\n        if (symbol.market === 'smartfx') {\n            contractSize = 100\n        }\n\n        return contractSize\n    }\n\n    const numberWithCommas = (input) => {\n        return input.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n    }\n\n    const numberSubmitFormat = (input) => {\n        return input.replace(/^0+(?!\\.|$)/, '')\n    }\n\n    return (\n        <StyledSection direction=\"column\">\n            <Header as=\"h2\" type=\"page-title\" align=\"center\" mt=\"6rem\" mb=\"1.2rem\">\n                {localize('Margin calculator')}\n            </Header>\n\n            <SectionSubtitle as=\"h5\" align=\"center\" weight=\"normal\">\n                {localize(\n                    'Our margin calculator helps you to estimate the margin required to keep your positions open overnight on Deriv MetaTrader 5 (DMT5).',\n                )}\n            </SectionSubtitle>\n\n            <ContentContainer mb=\"4.0rem\">\n                <FormWrapper>\n                    <Formik\n                        enableReinitialize\n                        initialValues={{\n                            accountType: 'Synthetic',\n                            margin: 0,\n                            marginSymbol: 'USD',\n                            symbol: '',\n                            volume: '',\n                            assetPrice: '',\n                            leverage: '',\n                            optionList: syntheticItemLists,\n                            contractSize: '',\n                        }}\n                        validate={resetValidation}\n                        onSubmit={(values, { setFieldValue }) => {\n                            setFieldValue('margin', getMargin(values))\n                            setFieldValue('volume', numberSubmitFormat(values.volume))\n                            setFieldValue('assetPrice', numberSubmitFormat(values.assetPrice))\n                        }}\n                    >\n                        {({\n                            values,\n                            setFieldValue,\n                            setFieldError,\n                            setFieldTouched,\n                            handleBlur,\n                            errors,\n                            touched,\n                            setErrors,\n                            resetForm,\n                            isValid,\n                            dirty,\n                        }) => (\n                            <CalculatorForm>\n                                <CalculatorHeader>\n                                    <CalculatorLabel htmlFor=\"message\">\n                                        {localize('Margin required')}\n                                    </CalculatorLabel>\n                                    <CalculatorOutputContainer>\n                                        <CalculatorOutputField>\n                                            {numberWithCommas(values.margin)}\n                                        </CalculatorOutputField>\n                                        <CalculatorOutputSymbol>\n                                            {values.marginSymbol}\n                                        </CalculatorOutputSymbol>\n                                    </CalculatorOutputContainer>\n                                </CalculatorHeader>\n\n                                <CalculatorBody>\n                                    <CalculatorLabel>{localize('Account type')}</CalculatorLabel>\n                                    <Flex\n                                        mb=\"3rem\"\n                                        mt=\"1rem\"\n                                        jc=\"space-between\"\n                                        tablet={{ height: 'unset' }}\n                                    >\n                                        <CalculatorTabItem\n                                            active={tab === 'Synthetic'}\n                                            onClick={() => {\n                                                onTabClick('Synthetic')\n                                                setErrors({})\n                                                resetForm({})\n                                            }}\n                                        >\n                                            <Text align=\"center\">{localize('Synthetic')}</Text>\n                                        </CalculatorTabItem>\n                                        <CalculatorTabItem\n                                            active={tab === 'Financial'}\n                                            disabled={tab === 'Financial'}\n                                            onClick={() => {\n                                                onTabClick('Financial')\n                                                setErrors({})\n                                                resetForm({})\n                                                setFieldValue('accountType', 'Financial')\n                                                setFieldValue('optionList', financialItemLists)\n                                            }}\n                                        >\n                                            <Text align=\"center\">{localize('Financial')}</Text>\n                                        </CalculatorTabItem>\n                                    </Flex>\n\n                                    <CalculatorDropdown\n                                        option_list={values.optionList}\n                                        label={localize('Symbol')}\n                                        default_option={optionItemDefault}\n                                        selected_option={values.symbol}\n                                        id=\"symbol\"\n                                        onChange={(value) => {\n                                            setFieldValue('marginSymbol', getMarginCurrency(value))\n                                            setFieldValue('contractSize', getContractSize(value))\n                                            setFieldValue('symbol', value)\n                                        }}\n                                        error={touched.symbol && errors.symbol}\n                                        onBlur={handleBlur}\n                                        autocomplete=\"off\"\n                                        contractSize={values.contractSize}\n                                    />\n\n                                    <InputGroup>\n                                        <Field\n                                            name=\"volume\"\n                                            value={values.volume}\n                                            onChange={(value) => {\n                                                setFieldValue('volume', value)\n                                            }}\n                                        >\n                                            {({ field }) => (\n                                                <Input\n                                                    {...field}\n                                                    id=\"volume\"\n                                                    type=\"text\"\n                                                    label={localize('Volume')}\n                                                    autoComplete=\"off\"\n                                                    error={touched.volume && errors.volume}\n                                                    onBlur={handleBlur}\n                                                    handleError={(current_input) => {\n                                                        setFieldValue('volume', '', false)\n                                                        setFieldError('volume', '')\n                                                        setFieldTouched('volume', false, false)\n                                                        current_input.focus()\n                                                    }}\n                                                    maxLength=\"8\"\n                                                    background=\"white\"\n                                                />\n                                            )}\n                                        </Field>\n                                    </InputGroup>\n\n                                    <InputGroup>\n                                        <Field\n                                            name=\"assetPrice\"\n                                            value={values.assetPrice}\n                                            onChange={(value) => {\n                                                setFieldValue('assetPrice', value)\n                                            }}\n                                        >\n                                            {({ field }) => (\n                                                <Input\n                                                    {...field}\n                                                    id=\"assetPrice\"\n                                                    type=\"text\"\n                                                    label={localize('Asset price')}\n                                                    autoComplete=\"off\"\n                                                    error={touched.assetPrice && errors.assetPrice}\n                                                    onBlur={handleBlur}\n                                                    handleError={(current_input) => {\n                                                        setFieldValue('assetPrice', '', false)\n                                                        setFieldError('assetPrice', '')\n                                                        setFieldTouched('assetPrice', false, false)\n                                                        current_input.focus()\n                                                    }}\n                                                    maxLength=\"15\"\n                                                    background=\"white\"\n                                                />\n                                            )}\n                                        </Field>\n                                    </InputGroup>\n                                    <Dropdown\n                                        option_list={leverageItemLists}\n                                        id=\"leverage\"\n                                        label={localize('Leverage')}\n                                        default_option={optionItemDefault}\n                                        selected_option={values.leverage}\n                                        onChange={(value) => {\n                                            setFieldValue('leverage', value)\n                                        }}\n                                        error={touched.leverage && errors.leverage}\n                                        onBlur={handleBlur}\n                                        autoComplete=\"off\"\n                                        data-lpignore=\"true\"\n                                    />\n                                    <Flex mt=\"3rem\">\n                                        <CalculateButton\n                                            secondary\n                                            type=\"submit\"\n                                            disabled={!isValid || !dirty}\n                                        >\n                                            {localize('Calculate')}\n                                        </CalculateButton>\n                                    </Flex>\n                                </CalculatorBody>\n                            </CalculatorForm>\n                        )}\n                    </Formik>\n                </FormWrapper>\n\n                <RightContent>\n                    <TextWrapper>\n                        <Header as=\"h3\" type=\"section-title\" mb=\"0.8rem\">\n                            {localize('How margin is calculated')}\n                        </Header>\n\n                        <Text>\n                            <Localize translate_text=\"The margin required for a contract on DMT5 is calculated based on the formula:\" />\n                        </Text>\n                        <Text mb=\"1.6rem\">\n                            <Localize\n                                translate_text=\"<0> Margin = volume in lots × contract size × asset price/leverage </0>\"\n                                components={[<strong key={0} />]}\n                            />\n                        </Text>\n\n                        <Text mb=\"1.6rem\">\n                            <Localize translate_text=\"This gives you the margin requirement in the quote currency for forex pairs, or in the denomination of the underlying asset for other instruments.\" />\n                        </Text>\n                        <Text mb=\"2.4rem\">\n                            {localize(\n                                'For instance, if you are trading the USD/CHF forex pair, the margin requirement will be calculated in Swiss Franc (CHF) which is the quote currency. On the other hand, if you are trading Volatility Index 75,  then the margin requirement will be computed in US Dollar (USD), which is the denomination of the underlying asset – Volatility Index 75.',\n                            )}\n                        </Text>\n\n                        <Header as=\"h3\" type=\"section-title\" mb=\"0.8rem\">\n                            {localize('Example calculation')}\n                        </Header>\n\n                        <Text mb=\"16px\">\n                            {localize(\n                                'Let’s say you want to trade two lots of EUR/USD with an asset price of 1.10 USD and leverage of 100.',\n                            )}\n                        </Text>\n                    </TextWrapper>\n\n                    <ImageWrapper>\n                        <Show.Desktop>\n                            <QueryImage data={data.margin_formula} alt={'Margin formula'} />\n                        </Show.Desktop>\n\n                        <Show.Mobile>\n                            <QueryImage\n                                data={data.margin_formula_mobile}\n                                alt={'Margin formula mobile'}\n                            />\n                        </Show.Mobile>\n\n                        <FormulaText>\n                            <StyledOl>\n                                <li>\n                                    <span>\n                                        <Localize translate_text=\" One standard lot of forex = 100,000 units\" />\n                                    </span>\n                                </li>\n                            </StyledOl>\n                        </FormulaText>\n                    </ImageWrapper>\n\n                    <TextWrapper>\n                        <Text mb=\"1.6rem\" mt=\"1.6rem\">\n                            <Localize\n                                translate_text=\"So you will require a margin rate of <0>2,200 USD</0> to open the above position.\"\n                                components={[<strong key={0} />]}\n                            />\n                        </Text>\n                        <Text>\n                            {localize(\n                                'Note that these are approximate values only and will differ depending on the leverage that is set for your account and the asset you want to trade.',\n                            )}\n                        </Text>\n                    </TextWrapper>\n                </RightContent>\n            </ContentContainer>\n\n            <BottomContent direction=\"column\">\n                <BottomText mb=\"2.4rem\">\n                    <Localize\n                        translate_text=\"To view the asset price, go to Deriv MetaTrader 5 (DMT5), click on the <0>View </0> tab and select<0> Market Watch</0>, then right-click on the symbol you want to trade and select <0>Specification.</0>\"\n                        components={[<strong key={0} />]}\n                    />\n                </BottomText>\n\n                <LinkWrapper>\n                    <StyledLinkButton\n                        tertiary=\"true\"\n                        to=\"https://app.deriv.com/mt5\"\n                        external=\"true\"\n                        target=\"_blank\"\n                    >\n                        {localize('Go to DMT5 dashboard')}\n                    </StyledLinkButton>\n                    <StyledLinkButton secondary=\"true\" to=\"/trade-types/margin\">\n                        {localize('Learn more about margin')}\n                    </StyledLinkButton>\n                </LinkWrapper>\n            </BottomContent>\n        </StyledSection>\n    )\n}\n\nexport default MarginCalculator\n","import React from 'react'\nimport { Hero } from '../common/_style'\nimport MarginCalculatorSection from './_margin-calculator'\nimport { Container, SEO } from 'components/containers'\nimport { Header } from 'components/elements'\nimport { localize, WithIntl } from 'components/localization'\nimport Layout from 'components/layout/layout'\n\nconst MarginCalculator = () => {\n    return (\n        <Layout>\n            <SEO\n                title={localize('Margin Calculator')}\n                description={localize('Margin Calculator')}\n            />\n            <Hero jc=\"center\" ai=\"center\">\n                <Container>\n                    <Header as=\"h1\" type=\"display-title\" color=\"white\" align=\"center\">\n                        {localize('Margin Calculator')}\n                    </Header>\n                </Container>\n            </Hero>\n            <MarginCalculatorSection />\n        </Layout>\n    )\n}\nexport default WithIntl()(MarginCalculator)\n"],"sourceRoot":""}