{"version":3,"sources":["webpack:///./src/pages/trader-tools/swap-calculator/_swap-calculator.js","webpack:///./src/pages/trader-tools/swap-calculator/index.js"],"names":["StyledInputGroup","styled","InputGroup","SwapCalculator","data","useStaticQuery","useState","tab","setTab","onTabClick","toFixed","val","parseFloat","toLocaleString","getCurrencySwap","symbol","currency","market","name","display_name","slice","getContractSize","contractSize","numberWithCommas","input","toString","replace","numberSubmitFormat","numberSubmitFormatNegative","result","charAt","direction","as","type","align","mt","mb","localize","weight","p","tablet","height","active","onClick","size","enableReinitialize","initialValues","swapCharge","swapChargeSymbol","volume","optionList","syntheticItemLists","swapRate","assetPrice","validate","values","errors","symbol_error","validation","volume_error","assetPrice_error","swapRate_error","onSubmit","setFieldValue","swap_formula_synthetic","getSwapChargeSynthetic","handleBlur","touched","setFieldError","setFieldTouched","isValid","dirty","htmlFor","option_list","label","default_option","optionItemDefault","selected_option","id","onChange","value","error","onBlur","field","autoComplete","data-lpignore","handleError","current_input","focus","maxLength","background","secondary","disabled","translate_text","components","key","Desktop","swap_synthetic_formula","alt","Mobile","swap_synthetic_formula_mobile","tertiary","to","external","target","financialItemLists","pointValue","pointValue_error","getSwapChargeForex","max_width","swap_forex_formula","swap_forex_formula_mobile","WithIntl","title","description","jc","ai","color"],"mappings":"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","file":"component---src-pages-trader-tools-swap-calculator-index-js-323a4e21eee87398e9f8.js","sourcesContent":["import React, { useState } from 'react'\nimport { Formik, Field } from 'formik'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport styled from 'styled-components'\nimport {\n    optionItemDefault,\n    syntheticItemLists,\n    financialItemLists,\n} from '../common/_underlying-data'\nimport {\n    SwapTabSelector,\n    StyledSection,\n    SectionSubtitle,\n    ContentContainer,\n    SwapFormWrapper,\n    CalculatorForm,\n    CalculatorHeader,\n    CalculatorLabel,\n    CalculatorOutputContainer,\n    CalculatorOutputField,\n    CalculatorOutputSymbol,\n    CalculatorBody,\n    CalculatorDropdown,\n    InputGroup,\n    CalculateButton,\n    RightContent,\n    TextWrapper,\n    ImageWrapper,\n    FormulaText,\n    StyledOl,\n    LinkWrapper,\n    BottomContent,\n    BottomText,\n    StyledLinkButton,\n} from '../common/_style'\nimport validation from '../common/_validation'\nimport { localize, Localize } from 'components/localization'\nimport { Header, QueryImage, Text } from 'components/elements'\nimport { Flex, Show } from 'components/containers'\nimport Input from 'components/form/input'\n\nconst StyledInputGroup = styled(InputGroup)`\n    margin: 0;\n`\n\nconst SwapCalculator = () => {\n    const query = graphql`\n        query {\n            swap_synthetic_formula: file(\n                relativePath: { eq: \"trade-tools/swap-synthetic-formula.png\" }\n            ) {\n                ...fadeIn\n            }\n            swap_forex_formula: file(relativePath: { eq: \"trade-tools/swap-forex-formula.png\" }) {\n                ...fadeIn\n            }\n            swap_synthetic_formula_mobile: file(\n                relativePath: { eq: \"trade-tools/swap-synthetic-formula-mobile.png\" }\n            ) {\n                ...fadeIn\n            }\n            swap_forex_formula_mobile: file(\n                relativePath: { eq: \"trade-tools/swap-forex-formula-mobile.png\" }\n            ) {\n                ...fadeIn\n            }\n        }\n    `\n    const data = useStaticQuery(query)\n\n    const [tab, setTab] = useState('Synthetic')\n\n    const onTabClick = (tab) => {\n        setTab(tab)\n    }\n\n    const getSwapChargeSynthetic = (values) => {\n        const { volume, assetPrice, swapRate, contractSize, symbol } = values\n\n        let swap_formula_synthetic\n        const STEPINDEX_VALUE = 100\n        const RANGEBREAK100VALUE = 400\n        const RANGEBREAK200VALUE = 800\n\n        if (symbol.name === 'Step Index') {\n            swap_formula_synthetic = volume * STEPINDEX_VALUE\n        } else if (symbol.name === 'Range Break 100 Index') {\n            swap_formula_synthetic = volume * RANGEBREAK100VALUE\n        } else if (symbol.name === 'Range Break 200 Index') {\n            swap_formula_synthetic = volume * RANGEBREAK200VALUE\n        } else {\n            swap_formula_synthetic = (volume * contractSize * assetPrice * (swapRate / 100)) / 360\n        }\n        return toFixed(swap_formula_synthetic)\n    }\n\n    const getSwapChargeForex = (values) => {\n        const { volume, pointValue, swapRate, contractSize } = values\n        const swap_formula_forex = volume * contractSize * pointValue * swapRate\n        return toFixed(swap_formula_forex)\n    }\n\n    const toFixed = (val) => {\n        return parseFloat(val.toFixed(3)).toLocaleString()\n    }\n\n    const resetValidationSynthetic = (values) => {\n        const errors = {}\n        const symbol_error = validation.symbol(values.symbol)\n        const volume_error = validation.volume(values.volume)\n        const assetPrice_error = validation.assetPrice(values.assetPrice)\n        const swapRate_error = validation.swapRate(values.swapRate)\n\n        if (symbol_error) {\n            errors.symbol = symbol_error\n        }\n        if (volume_error) {\n            errors.volume = volume_error\n        }\n        if (assetPrice_error) {\n            errors.assetPrice = assetPrice_error\n        }\n\n        if (swapRate_error) {\n            errors.swapRate = swapRate_error\n        }\n\n        return errors\n    }\n\n    const resetValidationForex = (values) => {\n        const errors = {}\n        const symbol_error = validation.symbol(values.symbol.display_name)\n        const volume_error = validation.volume(values.volume)\n        const pointValue_error = validation.pointValue(values.pointValue)\n        const swapRate_error = validation.swapRate(values.swapRate)\n\n        if (symbol_error) {\n            errors.symbol = symbol_error\n        }\n        if (volume_error) {\n            errors.volume = volume_error\n        }\n        if (pointValue_error) {\n            errors.pointValue = pointValue_error\n        }\n\n        if (swapRate_error) {\n            errors.swapRate = swapRate_error\n        }\n\n        return errors\n    }\n\n    const getCurrencySwap = (symbol) => {\n        let currency = 'USD'\n        if (symbol.market === 'synthetic_indices' || symbol.market === 'commodities') {\n            currency = 'USD'\n        }\n\n        if (symbol.name === 'DAX_30') {\n            currency = 'EUR'\n        }\n\n        if (symbol.market === 'forex' && symbol.name !== 'default' && symbol.name !== 'CL_BRENT') {\n            currency = symbol.display_name.slice(-3)\n        }\n\n        return currency\n    }\n\n    const getContractSize = (symbol) => {\n        let contractSize = 1 //crypto falls into this contract size\n\n        if (symbol.market === 'forex') {\n            contractSize = 100000\n        }\n\n        if (symbol.market === 'commodities') {\n            switch (symbol.name) {\n                case 'XAGUSD':\n                    contractSize = 5000\n                    break\n                case 'XAUUSD':\n                case 'XPDUSD':\n                case 'XPTUSD':\n                    contractSize = 100\n                    break\n            }\n        }\n\n        if (symbol.name === 'Step Index') {\n            contractSize = 10\n        }\n\n        if (symbol.market === 'smartfx') {\n            contractSize = 100\n        }\n\n        return contractSize\n    }\n\n    const numberWithCommas = (input) => {\n        return input.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n    }\n\n    const numberSubmitFormat = (input) => {\n        return input.replace(/^0+(?!\\.|$)/, '')\n    }\n\n    const numberSubmitFormatNegative = (input) => {\n        let result = input.replace(/^(-?)0+/, '$1')\n\n        if (result.charAt(0) == '-' && result.charAt(1) == '.') {\n            result = result.slice(0, 1) + '0' + result.slice(1)\n        } else if (result.charAt(0) == '.') {\n            result = '0' + result\n        }\n\n        return result\n    }\n\n    return (\n        <StyledSection direction=\"column\">\n            <Header as=\"h2\" type=\"page-title\" align=\"center\" mt=\"8rem\" mb=\"1.2rem\">\n                {localize('Swap calculator')}\n            </Header>\n\n            <SectionSubtitle as=\"h5\" align=\"center\" mb=\"4rem\" weight=\"normal\">\n                {localize(\n                    'Our swap calculator helps you to estimate the swap charges required to keep your positions open overnight on Deriv MetaTrader 5 (DMT5).',\n                )}\n            </SectionSubtitle>\n\n            <Flex mb=\"40px\" p=\"0 1.6rem\" tablet={{ mb: '32px', height: 'unset' }}>\n                <SwapTabSelector\n                    active={tab === 'Synthetic'}\n                    onClick={() => onTabClick('Synthetic')}\n                >\n                    <Text size=\"var(--text-size-m)\" align=\"center\">\n                        {localize('Synthetic indices')}\n                    </Text>\n                </SwapTabSelector>\n                <SwapTabSelector active={tab === 'Real'} onClick={() => onTabClick('Real')}>\n                    <Text size=\"var(--text-size-m)\" align=\"center\">\n                        {localize('Forex and commodities')}\n                    </Text>\n                </SwapTabSelector>\n            </Flex>\n\n            {tab === 'Synthetic' ? (\n                <>\n                    <ContentContainer mb=\"4.0rem\">\n                        <SwapFormWrapper>\n                            <Formik\n                                enableReinitialize\n                                initialValues={{\n                                    swapCharge: 0,\n                                    swapChargeSymbol: 'USD',\n                                    symbol: '',\n                                    volume: '',\n                                    optionList: syntheticItemLists,\n                                    contractSize: '',\n                                    swapRate: '',\n                                    assetPrice: '',\n                                }}\n                                validate={resetValidationSynthetic}\n                                onSubmit={(values, { setFieldValue }) => {\n                                    setFieldValue('swapCharge', getSwapChargeSynthetic(values))\n                                    setFieldValue('volume', numberSubmitFormat(values.volume))\n                                    setFieldValue(\n                                        'swapRate',\n                                        numberSubmitFormatNegative(values.swapRate),\n                                    )\n                                    setFieldValue(\n                                        'assetPrice',\n                                        numberSubmitFormat(values.assetPrice),\n                                    )\n                                }}\n                            >\n                                {({\n                                    values,\n                                    setFieldValue,\n                                    handleBlur,\n                                    errors,\n                                    touched,\n                                    setFieldError,\n                                    setFieldTouched,\n                                    isValid,\n                                    dirty,\n                                }) => (\n                                    <CalculatorForm>\n                                        <CalculatorHeader>\n                                            <CalculatorLabel htmlFor=\"message\">\n                                                {localize('Swap charge')}\n                                            </CalculatorLabel>\n                                            <CalculatorOutputContainer>\n                                                <CalculatorOutputField>\n                                                    {numberWithCommas(values.swapCharge)}\n                                                </CalculatorOutputField>\n                                                <CalculatorOutputSymbol>\n                                                    {values.swapChargeSymbol}\n                                                </CalculatorOutputSymbol>\n                                            </CalculatorOutputContainer>\n                                        </CalculatorHeader>\n\n                                        <CalculatorBody>\n                                            <CalculatorDropdown\n                                                mb=\"2.4rem\"\n                                                option_list={values.optionList}\n                                                label={localize('Symbol')}\n                                                default_option={optionItemDefault}\n                                                selected_option={values.symbol}\n                                                id=\"symbol\"\n                                                onChange={(value) => {\n                                                    setFieldValue(\n                                                        'swapCurrency',\n                                                        getCurrencySwap(value),\n                                                    )\n\n                                                    setFieldValue(\n                                                        'contractSize',\n                                                        getContractSize(value),\n                                                    )\n                                                    setFieldValue('symbol', value)\n                                                }}\n                                                contractSize={values.contractSize}\n                                                error={touched.symbol && errors.symbol}\n                                                onBlur={handleBlur}\n                                            />\n\n                                            <InputGroup>\n                                                <Field\n                                                    name=\"volume\"\n                                                    value={values.volume}\n                                                    onChange={(value) => {\n                                                        setFieldValue('volume', value)\n                                                    }}\n                                                >\n                                                    {({ field }) => (\n                                                        <Input\n                                                            {...field}\n                                                            id=\"volume\"\n                                                            type=\"text\"\n                                                            label={localize('Volume')}\n                                                            autoComplete=\"off\"\n                                                            error={touched.volume && errors.volume}\n                                                            onBlur={handleBlur}\n                                                            data-lpignore=\"true\"\n                                                            handleError={(current_input) => {\n                                                                setFieldValue('volume', '', false)\n                                                                setFieldError('volume', '')\n                                                                setFieldTouched(\n                                                                    'volume',\n                                                                    false,\n                                                                    false,\n                                                                )\n                                                                current_input.focus()\n                                                            }}\n                                                            maxLength=\"8\"\n                                                            background=\"white\"\n                                                        />\n                                                    )}\n                                                </Field>\n                                            </InputGroup>\n\n                                            <InputGroup>\n                                                <Field\n                                                    name=\"assetPrice\"\n                                                    value={values.assetPrice}\n                                                    onChange={(value) => {\n                                                        setFieldValue('assetPrice', value)\n                                                    }}\n                                                >\n                                                    {({ field }) => (\n                                                        <Input\n                                                            {...field}\n                                                            id=\"asset\"\n                                                            type=\"text\"\n                                                            value={values.assetPrice}\n                                                            label={localize('Asset price')}\n                                                            autoComplete=\"off\"\n                                                            error={\n                                                                touched.assetPrice &&\n                                                                errors.assetPrice\n                                                            }\n                                                            onBlur={handleBlur}\n                                                            data-lpignore=\"true\"\n                                                            handleError={(current_input) => {\n                                                                setFieldValue(\n                                                                    'assetPrice',\n                                                                    '',\n                                                                    false,\n                                                                )\n                                                                setFieldError('assetPrice', '')\n                                                                setFieldTouched(\n                                                                    'assetPrice',\n                                                                    false,\n                                                                    false,\n                                                                )\n                                                                current_input.focus()\n                                                            }}\n                                                            maxLength=\"15\"\n                                                            background=\"white\"\n                                                        />\n                                                    )}\n                                                </Field>\n                                            </InputGroup>\n\n                                            <StyledInputGroup>\n                                                <Field\n                                                    name=\"swapRate\"\n                                                    value={values.swapRate}\n                                                    onChange={(value) => {\n                                                        setFieldValue('swapRate', value)\n                                                    }}\n                                                >\n                                                    {({ field }) => (\n                                                        <Input\n                                                            {...field}\n                                                            id=\"swapRate\"\n                                                            type=\"text\"\n                                                            value={values.swapRate}\n                                                            label={localize('Swap rate')}\n                                                            autoComplete=\"off\"\n                                                            error={\n                                                                touched.swapRate && errors.swapRate\n                                                            }\n                                                            onBlur={handleBlur}\n                                                            data-lpignore=\"true\"\n                                                            handleError={(current_input) => {\n                                                                setFieldValue('swapRate', '', false)\n                                                                setFieldError('swapRate', '')\n                                                                setFieldTouched(\n                                                                    'swapRate',\n                                                                    false,\n                                                                    false,\n                                                                )\n                                                                current_input.focus()\n                                                            }}\n                                                            maxLength=\"15\"\n                                                            background=\"white\"\n                                                        />\n                                                    )}\n                                                </Field>\n                                            </StyledInputGroup>\n                                            <Flex mt=\"1.5rem\">\n                                                <CalculateButton\n                                                    secondary\n                                                    type=\"submit\"\n                                                    disabled={!isValid || !dirty}\n                                                >\n                                                    {localize('Calculate')}\n                                                </CalculateButton>\n                                            </Flex>\n                                        </CalculatorBody>\n                                    </CalculatorForm>\n                                )}\n                            </Formik>\n                        </SwapFormWrapper>\n\n                        <RightContent>\n                            <TextWrapper>\n                                <Header as=\"h3\" type=\"section-title\" mb=\"8px\">\n                                    {localize('How swap charges are calculated')}\n                                </Header>\n\n                                <Text>\n                                    <Localize translate_text=\"For synthetic indices, the swap charge is calculated on an annual basis for long and short positions using the formula:\" />\n                                </Text>\n                                <Text mb=\"2rem\">\n                                    <Localize\n                                        translate_text=\"<0>Swap charge = volume × contract size × asset price × (swap rate/100) /360</0>\"\n                                        components={[<strong key={0} />]}\n                                    />\n                                </Text>\n\n                                <Text mb=\"2rem\">\n                                    <Localize translate_text=\"This gives you the swap charge in USD.\" />\n                                </Text>\n\n                                <Header as=\"h3\" type=\"section-title\" mb=\"0.8rem\">\n                                    {localize('Example calculation')}\n                                </Header>\n\n                                <Text mb=\"2rem\">\n                                    {localize(\n                                        'Let’s say you want to keep 0.01 lots of Volatility 75 Index with an asset price of 400,000 USD and swap rate of -7.5 open for one night.',\n                                    )}\n                                </Text>\n                            </TextWrapper>\n                            <ImageWrapper>\n                                <Show.Desktop>\n                                    <QueryImage\n                                        data={data.swap_synthetic_formula}\n                                        alt={'swap synthetic formula'}\n                                    />\n                                </Show.Desktop>\n                                <Show.Mobile>\n                                    <QueryImage\n                                        data={data.swap_synthetic_formula_mobile}\n                                        alt={'swap synthetic formula mobile'}\n                                    />\n                                </Show.Mobile>\n                                <FormulaText size=\"14px\">\n                                    <StyledOl>\n                                        <li>\n                                            <span>\n                                                <Localize translate_text=\"If the swap rate is positive, your account will be credited with the swap amount. If it is negative, your account will be debited\" />\n                                            </span>\n                                        </li>\n                                    </StyledOl>\n                                </FormulaText>\n                            </ImageWrapper>\n                            <TextWrapper>\n                                <Text mt=\"1.6rem\">\n                                    <Localize\n                                        translate_text=\"So you will be required to pay a swap charge of <0>0.83 USD</0> to keep the position open for one night.\"\n                                        components={[<strong key={0} />]}\n                                    />\n                                </Text>\n                            </TextWrapper>\n                        </RightContent>\n                    </ContentContainer>\n\n                    <BottomContent direction=\"column\">\n                        <BottomText size=\"1.6rem\" mb=\"2.4rem\">\n                            <Localize\n                                translate_text=\"To view the asset price and swap rate, go to Deriv MetaTrader 5 (DMT5), click on the <0>View </0> tab and select<0> Market Watch</0>, then right-click on the symbol you want to trade and select <0>Specification.</0>\"\n                                components={[<strong key={0} />]}\n                            />\n                        </BottomText>\n\n                        <LinkWrapper>\n                            {\n                                <StyledLinkButton\n                                    tertiary=\"true\"\n                                    to=\"https://app.deriv.com/mt5\"\n                                    external=\"true\"\n                                    target=\"_blank\"\n                                >\n                                    {localize('Go to DMT5 dashboard')}\n                                </StyledLinkButton>\n                            }\n                            {\n                                <StyledLinkButton\n                                    secondary=\"true\"\n                                    to=\"/trade-types/margin#swap-policy\"\n                                >\n                                    {localize('Learn more about swaps')}\n                                </StyledLinkButton>\n                            }\n                        </LinkWrapper>\n                    </BottomContent>\n                </>\n            ) : (\n                <>\n                    <ContentContainer mb=\"2.0rem\">\n                        <SwapFormWrapper>\n                            <Formik\n                                enableReinitialize\n                                initialValues={{\n                                    swapCharge: 0,\n                                    swapChargeSymbol: 'USD',\n                                    symbol: '',\n                                    volume: '',\n                                    optionList: financialItemLists,\n                                    contractSize: '',\n                                    swapRate: '',\n                                    pointValue: '',\n                                }}\n                                validate={resetValidationForex}\n                                onSubmit={(values, { setFieldValue }) => {\n                                    setFieldValue('swapCharge', getSwapChargeForex(values))\n                                    setFieldValue('volume', numberSubmitFormat(values.volume))\n                                    setFieldValue(\n                                        'swapRate',\n                                        numberSubmitFormatNegative(values.swapRate),\n                                    )\n                                    setFieldValue(\n                                        'pointValue',\n                                        numberSubmitFormat(values.pointValue),\n                                    )\n                                }}\n                            >\n                                {({\n                                    values,\n                                    setFieldValue,\n                                    handleBlur,\n                                    errors,\n                                    touched,\n                                    isValid,\n                                    dirty,\n                                    setFieldTouched,\n                                    setFieldError,\n                                }) => (\n                                    <CalculatorForm>\n                                        <CalculatorHeader>\n                                            <CalculatorLabel htmlFor=\"message\">\n                                                {localize('Swap charge')}\n                                            </CalculatorLabel>\n                                            <CalculatorOutputContainer>\n                                                <CalculatorOutputField>\n                                                    {numberWithCommas(values.swapCharge)}\n                                                </CalculatorOutputField>\n                                                <CalculatorOutputSymbol>\n                                                    {values.swapChargeSymbol}\n                                                </CalculatorOutputSymbol>\n                                            </CalculatorOutputContainer>\n                                        </CalculatorHeader>\n\n                                        <CalculatorBody>\n                                            <CalculatorDropdown\n                                                mb=\"2.4rem\"\n                                                default_option={optionItemDefault}\n                                                option_list={values.optionList}\n                                                label={localize('Symbol')}\n                                                selected_option={values.symbol}\n                                                id=\"symbol\"\n                                                onChange={(value) => {\n                                                    setFieldValue(\n                                                        'swapCurrency',\n                                                        getCurrencySwap(value),\n                                                    )\n                                                    setFieldValue(\n                                                        'contractSize',\n                                                        getContractSize(value),\n                                                    )\n                                                    setFieldValue('symbol', value)\n                                                }}\n                                                contractSize={values.contractSize}\n                                                error={touched.symbol && errors.symbol}\n                                                onBlur={handleBlur}\n                                            />\n                                            <InputGroup>\n                                                <Field\n                                                    name=\"volume\"\n                                                    value={values.volume}\n                                                    onChange={(value) => {\n                                                        setFieldValue('volume', value)\n                                                    }}\n                                                >\n                                                    {({ field }) => (\n                                                        <Input\n                                                            {...field}\n                                                            id=\"volume\"\n                                                            type=\"text\"\n                                                            label={localize('Volume')}\n                                                            autoComplete=\"off\"\n                                                            error={touched.volume && errors.volume}\n                                                            onBlur={handleBlur}\n                                                            data-lpignore=\"true\"\n                                                            handleError={(current_input) => {\n                                                                setFieldValue('volume', '', false)\n                                                                setFieldError('volume', '')\n                                                                setFieldTouched(\n                                                                    'volume',\n                                                                    false,\n                                                                    false,\n                                                                )\n                                                                current_input.focus()\n                                                            }}\n                                                            maxLength=\"8\"\n                                                            background=\"white\"\n                                                        />\n                                                    )}\n                                                </Field>\n                                            </InputGroup>\n\n                                            <InputGroup>\n                                                <Field\n                                                    name=\"pointValue\"\n                                                    value={values.pointValue}\n                                                    onChange={(value) => {\n                                                        setFieldValue('pointValue', value)\n                                                    }}\n                                                >\n                                                    {({ field }) => (\n                                                        <Input\n                                                            {...field}\n                                                            id=\"pointValue\"\n                                                            type=\"text\"\n                                                            value={values.pointValue}\n                                                            label={localize('Point value')}\n                                                            autoComplete=\"off\"\n                                                            error={\n                                                                touched.pointValue &&\n                                                                errors.pointValue\n                                                            }\n                                                            onBlur={handleBlur}\n                                                            data-lpignore=\"true\"\n                                                            handleError={(current_input) => {\n                                                                setFieldValue(\n                                                                    'pointValue',\n                                                                    '',\n                                                                    false,\n                                                                )\n                                                                setFieldError('pointValue', '')\n                                                                setFieldTouched(\n                                                                    'pointValue',\n                                                                    false,\n                                                                    false,\n                                                                )\n                                                                current_input.focus()\n                                                            }}\n                                                            maxLength=\"15\"\n                                                            background=\"white\"\n                                                        />\n                                                    )}\n                                                </Field>\n                                            </InputGroup>\n\n                                            <StyledInputGroup>\n                                                <Field\n                                                    name=\"swapRate\"\n                                                    value={values.swapRate}\n                                                    onChange={(value) => {\n                                                        setFieldValue('swapRate', value)\n                                                    }}\n                                                >\n                                                    {({ field }) => (\n                                                        <Input\n                                                            {...field}\n                                                            id=\"swapRate\"\n                                                            type=\"text\"\n                                                            value={values.swapRate}\n                                                            label={localize('Swap rate')}\n                                                            autoComplete=\"off\"\n                                                            error={\n                                                                touched.swapRate && errors.swapRate\n                                                            }\n                                                            onBlur={handleBlur}\n                                                            data-lpignore=\"true\"\n                                                            handleError={(current_input) => {\n                                                                setFieldValue('swapRate', '', false)\n                                                                setFieldError('swapRate', '')\n                                                                setFieldTouched(\n                                                                    'swapRate',\n                                                                    false,\n                                                                    false,\n                                                                )\n                                                                current_input.focus()\n                                                            }}\n                                                            maxLength=\"15\"\n                                                            background=\"white\"\n                                                        />\n                                                    )}\n                                                </Field>\n                                            </StyledInputGroup>\n                                            <Flex mt=\"1.5rem\">\n                                                <CalculateButton\n                                                    secondary\n                                                    type=\"submit\"\n                                                    disabled={!isValid || !dirty}\n                                                >\n                                                    {localize('Calculate')}\n                                                </CalculateButton>\n                                            </Flex>\n                                        </CalculatorBody>\n                                    </CalculatorForm>\n                                )}\n                            </Formik>\n                        </SwapFormWrapper>\n\n                        <RightContent direction=\"column\" max_width=\"69rem\">\n                            <TextWrapper>\n                                <Header as=\"h3\" type=\"section-title\" mb=\"8px\">\n                                    {localize('How swap charges are calculated')}\n                                </Header>\n\n                                <Text>\n                                    <Localize translate_text=\"For forex and commodities, the swap charge is calculated using the formula:\" />\n                                </Text>\n                                <Text mb=\"2rem\">\n                                    <Localize\n                                        translate_text=\"<0>Swap charge = volume × contract size × point value × swap rate</0>\"\n                                        components={[<strong key={0} />]}\n                                    />\n                                </Text>\n\n                                <Text mb=\"2rem\">\n                                    <Localize translate_text=\"This gives you the swap charge in the quote currency for forex pairs, or in the denomination of the underlying asset for commodities.\" />\n                                </Text>\n\n                                <Text mb=\"2rem\">\n                                    <Localize translate_text=\"For instance, if you are trading the USD/JPY forex pair, the swap charge will be computed in Japanese Yen (JPY) which is the quote currency. On the other hand, if you are trading oil,  then the swap charge will be computed in US Dollar (USD), which is the denomination of the underlying asset – oil.\" />\n                                </Text>\n\n                                <Header as=\"h3\" type=\"section-title\" mb=\"0.8rem\">\n                                    {localize('Example calculation')}\n                                </Header>\n\n                                <Text mb=\"2rem\">\n                                    {localize(\n                                        'Let’s say you want to keep two lots of EUR/USD with a point value of 0.00001 and swap rate of -0.12 open for one night.',\n                                    )}\n                                </Text>\n                            </TextWrapper>\n                            <ImageWrapper>\n                                <Show.Desktop>\n                                    <QueryImage\n                                        data={data.swap_forex_formula}\n                                        alt={'Swap forex formula'}\n                                    />\n                                </Show.Desktop>\n                                <Show.Mobile>\n                                    <QueryImage\n                                        data={data.swap_forex_formula_mobile}\n                                        alt={'Swap forex formula mobile'}\n                                    />\n                                </Show.Mobile>\n                                <FormulaText size=\"14px\">\n                                    <StyledOl>\n                                        <li>\n                                            <span>\n                                                <Localize translate_text=\"One standard lot for Forex = 100,000 units\" />\n                                            </span>\n                                        </li>\n                                        <li>\n                                            <span>\n                                                <Localize translate_text=\"Point value is based on the current digit of the asset\" />\n                                            </span>\n                                        </li>\n                                        <li>\n                                            <span>\n                                                <Localize translate_text=\"If the swap rate is positive, your account will be credited with the swap amount. If it is negative, your account will be debited\" />\n                                            </span>\n                                        </li>\n                                    </StyledOl>\n                                </FormulaText>\n                            </ImageWrapper>\n                            <TextWrapper>\n                                <Text mt=\"1.6rem\">\n                                    <Localize\n                                        translate_text=\"So you will be required to pay a swap charge of <0>0.24 USD</0> to keep the position open for one night.\"\n                                        components={[<strong key={0} />]}\n                                    />\n                                </Text>\n                            </TextWrapper>\n                        </RightContent>\n                    </ContentContainer>\n\n                    <BottomContent direction=\"column\">\n                        <BottomText mb=\"2.4rem\" mt=\"2.4rem\">\n                            <Localize\n                                translate_text=\"To view the swap rate and digits of the asset, go to Deriv MetaTrader 5 (DMT5), click on the <0>View </0> tab and select<0> Market Watch</0>, then right-click on the symbol you want to trade and select <0>Specification.</0>\"\n                                components={[<strong key={0} />]}\n                            />\n                        </BottomText>\n\n                        <BottomText mb=\"2.4rem\">\n                            <Localize translate_text=\"You can derive the point value from the current digits of the asset. Typically, if the digit is 3, then the point value will be 0.001. If the digit is 5, then the point value will be 0.00001, and so on.\" />\n                        </BottomText>\n\n                        <LinkWrapper>\n                            <StyledLinkButton\n                                tertiary=\"true\"\n                                to=\"https://app.deriv.com/mt5\"\n                                external=\"true\"\n                                target=\"_blank\"\n                            >\n                                {localize('Go to DMT5 dashboard')}\n                            </StyledLinkButton>\n                            <StyledLinkButton secondary=\"true\" to=\"/trade-types/margin#swap-policy\">\n                                {localize('Learn more about swaps')}\n                            </StyledLinkButton>\n                        </LinkWrapper>\n                    </BottomContent>\n                </>\n            )}\n        </StyledSection>\n    )\n}\n\nexport default SwapCalculator\n","import React from 'react'\nimport { Hero } from '../common/_style'\nimport SwapCalculatorSection from './_swap-calculator'\nimport { Container, SEO } from 'components/containers'\nimport { Header } from 'components/elements'\nimport { localize, WithIntl } from 'components/localization'\nimport Layout from 'components/layout/layout'\n\nconst SwapCalculator = () => {\n    return (\n        <Layout>\n            <SEO title={localize('Swap Calculator')} description={localize('Swap Calculator')} />\n            <Hero jc=\"center\" ai=\"center\">\n                <Container>\n                    <Header as=\"h1\" type=\"display-title\" color=\"white\" align=\"center\">\n                        {localize('Swap Calculator')}\n                    </Header>\n                </Container>\n            </Hero>\n            <SwapCalculatorSection />\n        </Layout>\n    )\n}\nexport default WithIntl()(SwapCalculator)\n"],"sourceRoot":""}