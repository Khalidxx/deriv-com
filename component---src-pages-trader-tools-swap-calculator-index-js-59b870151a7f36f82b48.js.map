{"version":3,"sources":["webpack:///./src/pages/trader-tools/swap-calculator/_swap-calculator.js","webpack:///./src/pages/trader-tools/swap-calculator/index.js"],"names":["StyledInputGroup","styled","InputGroup","SwapCalculator","data","useStaticQuery","useState","tab","setTab","onTabClick","toFixed","val","parseFloat","toLocaleString","getCurrencySwap","symbol","currency","market","name","display_name","slice","getContractSize","contractSize","numberSubmitFormat","input","replace","numberSubmitFormatNegative","result","charAt","jc","ai","to","color","localize","src","RightArrow","alt","height","width","style","margin","direction","as","type","align","weight","mt","mb","tablet","active","onClick","size","enableReinitialize","initialValues","swapCharge","swapChargeSymbol","volume","optionList","syntheticItemLists","swapRate","assetPrice","validate","values","errors","symbol_error","validation","volume_error","assetPrice_error","swapRate_error","onSubmit","setFieldValue","swap_formula_synthetic","getSwapChargeSynthetic","handleBlur","touched","setFieldError","setFieldTouched","isValid","dirty","htmlFor","getCommaSeparatedNumber","option_list","label","default_option","optionItemDefault","selected_option","id","onChange","value","contract_size","error","onBlur","field","autoComplete","data-lpignore","handleError","current_input","focus","maxLength","background","secondary","disabled","translate_text","components","key","has_single_state","header","header_style","item_style","plus","Desktop","swap_synthetic_formula","Mobile","swap_synthetic_formula_mobile","tertiary","is_deriv_app_link","external","target","rel","financialItemLists","pointValue","pointValue_error","getSwapChargeForex","max_width","swap_forex_formula","swap_forex_formula_mobile","WithIntl","title","description"],"mappings":"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","file":"component---src-pages-trader-tools-swap-calculator-index-js-59b870151a7f36f82b48.js","sourcesContent":["import React, { useState } from 'react'\nimport { Formik, Field } from 'formik'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport styled from 'styled-components'\nimport {\n    optionItemDefault,\n    syntheticItemLists,\n    financialItemLists,\n} from '../common/_underlying-data'\nimport {\n    BreadCrumbContainer,\n    CalculateButton,\n    CalculatorBody,\n    CalculatorForm,\n    CalculatorHeader,\n    CalculatorLabel,\n    CalculatorOutputContainer,\n    CalculatorOutputField,\n    CalculatorOutputSymbol,\n    ContentContainer,\n    FormulaText,\n    header_style,\n    InputGroup,\n    item_style,\n    LinkWrapper,\n    RightContent,\n    SectionSubtitle,\n    StyledLinkButton,\n    StyledOl,\n    StyledSection,\n    SwapFormWrapper,\n    SwapTabSelector,\n} from '../common/_style'\nimport validation from '../common/_validation'\nimport { localize, Localize } from 'components/localization'\nimport {\n    Accordion,\n    AccordionItem,\n    Dropdown,\n    Header,\n    LocalizedLinkText,\n    QueryImage,\n    Text,\n} from 'components/elements'\nimport { Flex, Show } from 'components/containers'\nimport Input from 'components/form/input'\nimport { getCommaSeparatedNumber } from 'common/utility'\nimport RightArrow from 'images/svg/black-right-arrow.svg'\n\nconst StyledInputGroup = styled(InputGroup)`\n    margin: 0;\n`\n\nconst SwapCalculator = () => {\n    const query = graphql`\n        query {\n            swap_synthetic_formula: file(\n                relativePath: { eq: \"trade-tools/swap-synthetic-formula.png\" }\n            ) {\n                ...fadeIn\n            }\n            swap_forex_formula: file(relativePath: { eq: \"trade-tools/swap-forex-formula.png\" }) {\n                ...fadeIn\n            }\n            swap_synthetic_formula_mobile: file(\n                relativePath: { eq: \"trade-tools/swap-synthetic-formula-mobile.png\" }\n            ) {\n                ...fadeIn\n            }\n            swap_forex_formula_mobile: file(\n                relativePath: { eq: \"trade-tools/swap-forex-formula-mobile.png\" }\n            ) {\n                ...fadeIn\n            }\n        }\n    `\n    const data = useStaticQuery(query)\n\n    const [tab, setTab] = useState('Synthetic')\n\n    const onTabClick = (tab) => {\n        setTab(tab)\n    }\n\n    const getSwapChargeSynthetic = (values) => {\n        const { volume, assetPrice, swapRate, contractSize, symbol } = values\n\n        let swap_formula_synthetic\n        const STEPINDEX_VALUE = 100\n        const RANGEBREAK100VALUE = 400\n        const RANGEBREAK200VALUE = 800\n\n        if (symbol.name === 'Step Index') {\n            swap_formula_synthetic = volume * STEPINDEX_VALUE\n        } else if (symbol.name === 'Range Break 100 Index') {\n            swap_formula_synthetic = volume * RANGEBREAK100VALUE\n        } else if (symbol.name === 'Range Break 200 Index') {\n            swap_formula_synthetic = volume * RANGEBREAK200VALUE\n        } else {\n            swap_formula_synthetic = (volume * contractSize * assetPrice * (swapRate / 100)) / 360\n        }\n        return toFixed(swap_formula_synthetic)\n    }\n\n    const getSwapChargeForex = (values) => {\n        const { volume, pointValue, swapRate, contractSize } = values\n        const swap_formula_forex = volume * contractSize * pointValue * swapRate\n        return toFixed(swap_formula_forex)\n    }\n\n    const toFixed = (val) => {\n        return parseFloat(val.toFixed(3)).toLocaleString()\n    }\n\n    const resetValidationSynthetic = (values) => {\n        const errors = {}\n        const symbol_error = validation.symbol(values.symbol)\n        const volume_error = validation.volume(values.volume)\n        const assetPrice_error = validation.assetPrice(values.assetPrice)\n        const swapRate_error = validation.swapRate(values.swapRate)\n\n        if (symbol_error) {\n            errors.symbol = symbol_error\n        }\n        if (volume_error) {\n            errors.volume = volume_error\n        }\n        if (assetPrice_error) {\n            errors.assetPrice = assetPrice_error\n        }\n\n        if (swapRate_error) {\n            errors.swapRate = swapRate_error\n        }\n\n        return errors\n    }\n\n    const resetValidationForex = (values) => {\n        const errors = {}\n        const symbol_error = validation.symbol(values.symbol.display_name)\n        const volume_error = validation.volume(values.volume)\n        const pointValue_error = validation.pointValue(values.pointValue)\n        const swapRate_error = validation.swapRate(values.swapRate)\n\n        if (symbol_error) {\n            errors.symbol = symbol_error\n        }\n        if (volume_error) {\n            errors.volume = volume_error\n        }\n        if (pointValue_error) {\n            errors.pointValue = pointValue_error\n        }\n\n        if (swapRate_error) {\n            errors.swapRate = swapRate_error\n        }\n\n        return errors\n    }\n\n    const getCurrencySwap = (symbol) => {\n        let currency = 'USD'\n        if (symbol.market === 'synthetic_indices' || symbol.market === 'commodities') {\n            currency = 'USD'\n        }\n\n        if (symbol.name === 'DAX_30') {\n            currency = 'EUR'\n        }\n\n        if (symbol.market === 'forex' && symbol.name !== 'default' && symbol.name !== 'CL_BRENT') {\n            currency = symbol.display_name.slice(-3)\n        }\n\n        return currency\n    }\n\n    const getContractSize = (symbol) => {\n        let contractSize = 1 //crypto falls into this contract size\n\n        if (symbol.market === 'forex') {\n            contractSize = 100000\n        }\n\n        if (symbol.market === 'commodities') {\n            switch (symbol.name) {\n                case 'XAGUSD':\n                    contractSize = 5000\n                    break\n                case 'XAUUSD':\n                case 'XPDUSD':\n                case 'XPTUSD':\n                    contractSize = 100\n                    break\n            }\n        }\n\n        if (symbol.name === 'Step Index') {\n            contractSize = 10\n        }\n\n        if (symbol.market === 'smartfx') {\n            contractSize = 100\n        }\n\n        return contractSize\n    }\n\n    const numberSubmitFormat = (input) => {\n        return input.replace(/^0+(?!\\.|$)/, '')\n    }\n\n    const numberSubmitFormatNegative = (input) => {\n        let result = input.replace(/^(-?)0+/, '$1')\n\n        if (result.charAt(0) == '-' && result.charAt(1) == '.') {\n            result = result.slice(0, 1) + '0' + result.slice(1)\n        } else if (result.charAt(0) == '.') {\n            result = '0' + result\n        }\n\n        return result\n    }\n\n    return (\n        <>\n            <BreadCrumbContainer>\n                <Flex jc=\"flex-start\" ai=\"center\">\n                    <LocalizedLinkText to=\"/trader-tools\" color=\"grey-5\">\n                        {localize(\"Traders' tools\")}\n                    </LocalizedLinkText>\n                    <img\n                        src={RightArrow}\n                        alt={localize('right arrow')}\n                        height=\"16\"\n                        width=\"16\"\n                        style={{ margin: '0 8px' }}\n                    />\n                    <Text>{localize('Swap calculator')}</Text>\n                </Flex>\n            </BreadCrumbContainer>\n            <StyledSection direction=\"column\">\n                <SectionSubtitle as=\"h3\" type=\"sub-section-title\" align=\"center\" weight=\"normal\">\n                    {localize(\n                        'Our swap calculator helps you to estimate the swap charges required to keep your positions open overnight on Deriv MetaTrader 5 (DMT5).',\n                    )}\n                </SectionSubtitle>\n\n                <Flex mt=\"80px\" mb=\"40px\" tablet={{ mt: '40px', mb: '24px' }}>\n                    <SwapTabSelector\n                        active={tab === 'Synthetic'}\n                        onClick={() => onTabClick('Synthetic')}\n                    >\n                        <Text size=\"var(--text-size-m)\" align=\"center\">\n                            {localize('Synthetic')}\n                        </Text>\n                    </SwapTabSelector>\n                    <SwapTabSelector active={tab === 'Real'} onClick={() => onTabClick('Real')}>\n                        <Text size=\"var(--text-size-m)\" align=\"center\">\n                            {localize('Financial')}\n                        </Text>\n                    </SwapTabSelector>\n                </Flex>\n\n                {tab === 'Synthetic' ? (\n                    <>\n                        <ContentContainer mb=\"4.0rem\">\n                            <SwapFormWrapper>\n                                <Formik\n                                    enableReinitialize\n                                    initialValues={{\n                                        swapCharge: 0,\n                                        swapChargeSymbol: 'USD',\n                                        symbol: '',\n                                        volume: '',\n                                        optionList: syntheticItemLists,\n                                        contractSize: '',\n                                        swapRate: '',\n                                        assetPrice: '',\n                                    }}\n                                    validate={resetValidationSynthetic}\n                                    onSubmit={(values, { setFieldValue }) => {\n                                        setFieldValue('swapCharge', getSwapChargeSynthetic(values))\n                                        setFieldValue('volume', numberSubmitFormat(values.volume))\n                                        setFieldValue(\n                                            'swapRate',\n                                            numberSubmitFormatNegative(values.swapRate),\n                                        )\n                                        setFieldValue(\n                                            'assetPrice',\n                                            numberSubmitFormat(values.assetPrice),\n                                        )\n                                    }}\n                                >\n                                    {({\n                                        values,\n                                        setFieldValue,\n                                        handleBlur,\n                                        errors,\n                                        touched,\n                                        setFieldError,\n                                        setFieldTouched,\n                                        isValid,\n                                        dirty,\n                                    }) => (\n                                        <CalculatorForm>\n                                            <CalculatorHeader>\n                                                <CalculatorLabel htmlFor=\"message\">\n                                                    {localize('Swap charge')}\n                                                </CalculatorLabel>\n                                                <CalculatorOutputContainer>\n                                                    <CalculatorOutputField>\n                                                        {getCommaSeparatedNumber(values.swapCharge)}\n                                                    </CalculatorOutputField>\n                                                    <CalculatorOutputSymbol>\n                                                        {values.swapChargeSymbol}\n                                                    </CalculatorOutputSymbol>\n                                                </CalculatorOutputContainer>\n                                            </CalculatorHeader>\n\n                                            <CalculatorBody>\n                                                <Dropdown\n                                                    mb=\"3.6rem\"\n                                                    option_list={values.optionList}\n                                                    label={localize('Symbol')}\n                                                    default_option={optionItemDefault}\n                                                    selected_option={values.symbol}\n                                                    id=\"symbol\"\n                                                    onChange={(value) => {\n                                                        setFieldValue(\n                                                            'swapCurrency',\n                                                            getCurrencySwap(value),\n                                                        )\n\n                                                        setFieldValue(\n                                                            'contractSize',\n                                                            getContractSize(value),\n                                                        )\n                                                        setFieldValue('symbol', value)\n                                                    }}\n                                                    contract_size={values.contractSize}\n                                                    error={touched.symbol && errors.symbol}\n                                                    onBlur={handleBlur}\n                                                />\n\n                                                <InputGroup>\n                                                    <Field\n                                                        name=\"volume\"\n                                                        value={values.volume}\n                                                        onChange={(value) => {\n                                                            setFieldValue('volume', value)\n                                                        }}\n                                                    >\n                                                        {({ field }) => (\n                                                            <Input\n                                                                {...field}\n                                                                id=\"volume\"\n                                                                type=\"text\"\n                                                                label={localize('Volume')}\n                                                                autoComplete=\"off\"\n                                                                error={\n                                                                    touched.volume && errors.volume\n                                                                }\n                                                                onBlur={handleBlur}\n                                                                data-lpignore=\"true\"\n                                                                handleError={(current_input) => {\n                                                                    setFieldValue(\n                                                                        'volume',\n                                                                        '',\n                                                                        false,\n                                                                    )\n                                                                    setFieldError('volume', '')\n                                                                    setFieldTouched(\n                                                                        'volume',\n                                                                        false,\n                                                                        false,\n                                                                    )\n                                                                    current_input.focus()\n                                                                }}\n                                                                maxLength=\"8\"\n                                                                background=\"white\"\n                                                            />\n                                                        )}\n                                                    </Field>\n                                                </InputGroup>\n\n                                                <InputGroup>\n                                                    <Field\n                                                        name=\"assetPrice\"\n                                                        value={values.assetPrice}\n                                                        onChange={(value) => {\n                                                            setFieldValue('assetPrice', value)\n                                                        }}\n                                                    >\n                                                        {({ field }) => (\n                                                            <Input\n                                                                {...field}\n                                                                id=\"asset\"\n                                                                type=\"text\"\n                                                                value={values.assetPrice}\n                                                                label={localize('Asset price')}\n                                                                autoComplete=\"off\"\n                                                                error={\n                                                                    touched.assetPrice &&\n                                                                    errors.assetPrice\n                                                                }\n                                                                onBlur={handleBlur}\n                                                                data-lpignore=\"true\"\n                                                                handleError={(current_input) => {\n                                                                    setFieldValue(\n                                                                        'assetPrice',\n                                                                        '',\n                                                                        false,\n                                                                    )\n                                                                    setFieldError('assetPrice', '')\n                                                                    setFieldTouched(\n                                                                        'assetPrice',\n                                                                        false,\n                                                                        false,\n                                                                    )\n                                                                    current_input.focus()\n                                                                }}\n                                                                maxLength=\"15\"\n                                                                background=\"white\"\n                                                            />\n                                                        )}\n                                                    </Field>\n                                                </InputGroup>\n\n                                                <StyledInputGroup>\n                                                    <Field\n                                                        name=\"swapRate\"\n                                                        value={values.swapRate}\n                                                        onChange={(value) => {\n                                                            setFieldValue('swapRate', value)\n                                                        }}\n                                                    >\n                                                        {({ field }) => (\n                                                            <Input\n                                                                {...field}\n                                                                id=\"swapRate\"\n                                                                type=\"text\"\n                                                                value={values.swapRate}\n                                                                label={localize('Swap rate')}\n                                                                autoComplete=\"off\"\n                                                                error={\n                                                                    touched.swapRate &&\n                                                                    errors.swapRate\n                                                                }\n                                                                onBlur={handleBlur}\n                                                                data-lpignore=\"true\"\n                                                                handleError={(current_input) => {\n                                                                    setFieldValue(\n                                                                        'swapRate',\n                                                                        '',\n                                                                        false,\n                                                                    )\n                                                                    setFieldError('swapRate', '')\n                                                                    setFieldTouched(\n                                                                        'swapRate',\n                                                                        false,\n                                                                        false,\n                                                                    )\n                                                                    current_input.focus()\n                                                                }}\n                                                                maxLength=\"15\"\n                                                                background=\"white\"\n                                                            />\n                                                        )}\n                                                    </Field>\n                                                </StyledInputGroup>\n                                                <Flex mt=\"1.5rem\">\n                                                    <CalculateButton\n                                                        secondary\n                                                        type=\"submit\"\n                                                        disabled={!isValid || !dirty}\n                                                    >\n                                                        {localize('Calculate')}\n                                                    </CalculateButton>\n                                                </Flex>\n                                            </CalculatorBody>\n                                        </CalculatorForm>\n                                    )}\n                                </Formik>\n                            </SwapFormWrapper>\n\n                            <RightContent>\n                                <Header as=\"h3\" type=\"section-title\" mb=\"8px\">\n                                    {localize('How to calculate swap charges')}\n                                </Header>\n\n                                <Text>\n                                    <Localize translate_text=\"For synthetic, the swap charge is calculated on an annual basis for long and short positions based on this formula:\" />\n                                </Text>\n                                <Text mb=\"2rem\">\n                                    <Localize\n                                        translate_text=\"<0>Swap charge = volume × contract size × asset price × (swap rate ÷ 100) ÷ 360</0>\"\n                                        components={[<strong key={0} />]}\n                                    />\n                                </Text>\n\n                                <Text mb=\"2rem\">\n                                    <Localize translate_text=\"This gives you the swap charge in USD.\" />\n                                </Text>\n\n                                <Header as=\"h3\" type=\"section-title\" mb=\"16px\">\n                                    {localize('Example calculation')}\n                                </Header>\n\n                                <Accordion has_single_state>\n                                    <AccordionItem\n                                        header={localize('Swap charge')}\n                                        header_style={header_style}\n                                        style={item_style}\n                                        plus\n                                    >\n                                        <Text mb=\"2rem\">\n                                            {localize(\n                                                'Let’s say you want to keep 0.01 lots of Volatility 75 Index with an asset price of 400,000 USD and swap rate of -7.5 open for one night.',\n                                            )}\n                                        </Text>\n\n                                        <Show.Desktop>\n                                            <QueryImage\n                                                data={data.swap_synthetic_formula}\n                                                alt={localize('swap synthetic formula')}\n                                            />\n                                        </Show.Desktop>\n                                        <Show.Mobile>\n                                            <QueryImage\n                                                data={data.swap_synthetic_formula_mobile}\n                                                alt={localize('swap synthetic formula mobile')}\n                                            />\n                                        </Show.Mobile>\n                                        <FormulaText size=\"14px\">\n                                            <StyledOl>\n                                                <li>\n                                                    <span>\n                                                        <Localize translate_text=\"The contract size is one standard lot of Volatility 75 Index = 1\" />\n                                                    </span>\n                                                </li>\n                                                <li>\n                                                    <span>\n                                                        <Localize translate_text=\"If the swap rate is positive, your account will be credited with the swap amount. If it is negative, your account will be debited.\" />\n                                                    </span>\n                                                </li>\n                                            </StyledOl>\n                                        </FormulaText>\n\n                                        <Text mt=\"1.6rem\">\n                                            <Localize\n                                                translate_text=\"So you will require a swap charge of <0>0.83 USD</0> to keep the position open for one night.\"\n                                                components={[<strong key={0} />]}\n                                            />\n                                        </Text>\n                                    </AccordionItem>\n                                </Accordion>\n\n                                <LinkWrapper height=\"auto\">\n                                    {\n                                        <StyledLinkButton\n                                            tertiary=\"true\"\n                                            is_deriv_app_link\n                                            to=\"/mt5\"\n                                            external=\"true\"\n                                            target=\"_blank\"\n                                            rel=\"noopener noreferrer\"\n                                        >\n                                            {localize('Go to DMT5 dashboard')}\n                                        </StyledLinkButton>\n                                    }\n                                    {\n                                        <StyledLinkButton\n                                            secondary=\"true\"\n                                            to=\"/trade-types/margin#swap-policy\"\n                                        >\n                                            {localize('Learn more about swap')}\n                                        </StyledLinkButton>\n                                    }\n                                </LinkWrapper>\n                            </RightContent>\n                        </ContentContainer>\n                    </>\n                ) : (\n                    <>\n                        <ContentContainer mb=\"2.0rem\">\n                            <SwapFormWrapper>\n                                <Formik\n                                    enableReinitialize\n                                    initialValues={{\n                                        swapCharge: 0,\n                                        swapChargeSymbol: 'USD',\n                                        symbol: '',\n                                        volume: '',\n                                        optionList: financialItemLists,\n                                        contractSize: '',\n                                        swapRate: '',\n                                        pointValue: '',\n                                    }}\n                                    validate={resetValidationForex}\n                                    onSubmit={(values, { setFieldValue }) => {\n                                        setFieldValue('swapCharge', getSwapChargeForex(values))\n                                        setFieldValue('volume', numberSubmitFormat(values.volume))\n                                        setFieldValue(\n                                            'swapRate',\n                                            numberSubmitFormatNegative(values.swapRate),\n                                        )\n                                        setFieldValue(\n                                            'pointValue',\n                                            numberSubmitFormat(values.pointValue),\n                                        )\n                                    }}\n                                >\n                                    {({\n                                        values,\n                                        setFieldValue,\n                                        handleBlur,\n                                        errors,\n                                        touched,\n                                        isValid,\n                                        dirty,\n                                        setFieldTouched,\n                                        setFieldError,\n                                    }) => (\n                                        <CalculatorForm>\n                                            <CalculatorHeader>\n                                                <CalculatorLabel htmlFor=\"message\">\n                                                    {localize('Swap charge')}\n                                                </CalculatorLabel>\n                                                <CalculatorOutputContainer>\n                                                    <CalculatorOutputField>\n                                                        {getCommaSeparatedNumber(values.swapCharge)}\n                                                    </CalculatorOutputField>\n                                                    <CalculatorOutputSymbol>\n                                                        {values.swapChargeSymbol}\n                                                    </CalculatorOutputSymbol>\n                                                </CalculatorOutputContainer>\n                                            </CalculatorHeader>\n\n                                            <CalculatorBody>\n                                                <Dropdown\n                                                    default_option={optionItemDefault}\n                                                    option_list={values.optionList}\n                                                    label={localize('Symbol')}\n                                                    selected_option={values.symbol}\n                                                    id=\"symbol\"\n                                                    onChange={(value) => {\n                                                        setFieldValue(\n                                                            'swapCurrency',\n                                                            getCurrencySwap(value),\n                                                        )\n                                                        setFieldValue(\n                                                            'contractSize',\n                                                            getContractSize(value),\n                                                        )\n                                                        setFieldValue('symbol', value)\n                                                    }}\n                                                    contractSize={values.contractSize}\n                                                    error={touched.symbol && errors.symbol}\n                                                    onBlur={handleBlur}\n                                                />\n                                                <InputGroup>\n                                                    <Field\n                                                        name=\"volume\"\n                                                        value={values.volume}\n                                                        onChange={(value) => {\n                                                            setFieldValue('volume', value)\n                                                        }}\n                                                    >\n                                                        {({ field }) => (\n                                                            <Input\n                                                                {...field}\n                                                                id=\"volume\"\n                                                                type=\"text\"\n                                                                label={localize('Volume')}\n                                                                autoComplete=\"off\"\n                                                                error={\n                                                                    touched.volume && errors.volume\n                                                                }\n                                                                onBlur={handleBlur}\n                                                                data-lpignore=\"true\"\n                                                                handleError={(current_input) => {\n                                                                    setFieldValue(\n                                                                        'volume',\n                                                                        '',\n                                                                        false,\n                                                                    )\n                                                                    setFieldError('volume', '')\n                                                                    setFieldTouched(\n                                                                        'volume',\n                                                                        false,\n                                                                        false,\n                                                                    )\n                                                                    current_input.focus()\n                                                                }}\n                                                                maxLength=\"8\"\n                                                                background=\"white\"\n                                                            />\n                                                        )}\n                                                    </Field>\n                                                </InputGroup>\n\n                                                <InputGroup>\n                                                    <Field\n                                                        name=\"pointValue\"\n                                                        value={values.pointValue}\n                                                        onChange={(value) => {\n                                                            setFieldValue('pointValue', value)\n                                                        }}\n                                                    >\n                                                        {({ field }) => (\n                                                            <Input\n                                                                {...field}\n                                                                id=\"pointValue\"\n                                                                type=\"text\"\n                                                                value={values.pointValue}\n                                                                label={localize('Point value')}\n                                                                autoComplete=\"off\"\n                                                                error={\n                                                                    touched.pointValue &&\n                                                                    errors.pointValue\n                                                                }\n                                                                onBlur={handleBlur}\n                                                                data-lpignore=\"true\"\n                                                                handleError={(current_input) => {\n                                                                    setFieldValue(\n                                                                        'pointValue',\n                                                                        '',\n                                                                        false,\n                                                                    )\n                                                                    setFieldError('pointValue', '')\n                                                                    setFieldTouched(\n                                                                        'pointValue',\n                                                                        false,\n                                                                        false,\n                                                                    )\n                                                                    current_input.focus()\n                                                                }}\n                                                                maxLength=\"15\"\n                                                                background=\"white\"\n                                                            />\n                                                        )}\n                                                    </Field>\n                                                </InputGroup>\n\n                                                <StyledInputGroup>\n                                                    <Field\n                                                        name=\"swapRate\"\n                                                        value={values.swapRate}\n                                                        onChange={(value) => {\n                                                            setFieldValue('swapRate', value)\n                                                        }}\n                                                    >\n                                                        {({ field }) => (\n                                                            <Input\n                                                                {...field}\n                                                                id=\"swapRate\"\n                                                                type=\"text\"\n                                                                value={values.swapRate}\n                                                                label={localize('Swap rate')}\n                                                                autoComplete=\"off\"\n                                                                error={\n                                                                    touched.swapRate &&\n                                                                    errors.swapRate\n                                                                }\n                                                                onBlur={handleBlur}\n                                                                data-lpignore=\"true\"\n                                                                handleError={(current_input) => {\n                                                                    setFieldValue(\n                                                                        'swapRate',\n                                                                        '',\n                                                                        false,\n                                                                    )\n                                                                    setFieldError('swapRate', '')\n                                                                    setFieldTouched(\n                                                                        'swapRate',\n                                                                        false,\n                                                                        false,\n                                                                    )\n                                                                    current_input.focus()\n                                                                }}\n                                                                maxLength=\"15\"\n                                                                background=\"white\"\n                                                            />\n                                                        )}\n                                                    </Field>\n                                                </StyledInputGroup>\n                                                <Flex mt=\"1.5rem\">\n                                                    <CalculateButton\n                                                        secondary\n                                                        type=\"submit\"\n                                                        disabled={!isValid || !dirty}\n                                                    >\n                                                        {localize('Calculate')}\n                                                    </CalculateButton>\n                                                </Flex>\n                                            </CalculatorBody>\n                                        </CalculatorForm>\n                                    )}\n                                </Formik>\n                            </SwapFormWrapper>\n\n                            <RightContent direction=\"column\" max_width=\"69rem\">\n                                <Header as=\"h3\" type=\"section-title\" mb=\"8px\">\n                                    {localize('How to calculate swap charges')}\n                                </Header>\n\n                                <Text>\n                                    <Localize translate_text=\"For financial, the swap charge is calculated based on this formula:\" />\n                                </Text>\n                                <Text mb=\"2rem\">\n                                    <Localize\n                                        translate_text=\"<0>Swap charge = volume × contract size × point value × swap rate</0>\"\n                                        components={[<strong key={0} />]}\n                                    />\n                                </Text>\n\n                                <Text mb=\"2rem\">\n                                    <Localize translate_text=\"This gives you the swap charge in the quote currency for forex pairs, or in the denomination of the underlying asset for commodities.\" />\n                                </Text>\n\n                                <Text mb=\"2rem\">\n                                    <Localize translate_text=\"For instance, if you are trading the USD/JPY forex pair, the swap charge will be computed in Japanese Yen (JPY) which is the quote currency. On the other hand, if you are trading oil,  then the swap charge will be computed in US Dollar (USD), which is the denomination of the underlying asset – oil.\" />\n                                </Text>\n\n                                <Header as=\"h3\" type=\"section-title\" mb=\"16px\">\n                                    {localize('Example calculation')}\n                                </Header>\n\n                                <Accordion has_single_state>\n                                    <AccordionItem\n                                        header={localize('Swap charge')}\n                                        header_style={header_style}\n                                        style={item_style}\n                                        plus\n                                    >\n                                        <Text mb=\"2rem\">\n                                            {localize(\n                                                'Let’s say you want to keep two lots of EUR/USD with a point value of 0.00001 and swap rate of -0.12 open for one night.',\n                                            )}\n                                        </Text>\n\n                                        <Show.Desktop>\n                                            <QueryImage\n                                                data={data.swap_forex_formula}\n                                                alt={localize('Swap forex formula')}\n                                            />\n                                        </Show.Desktop>\n                                        <Show.Mobile>\n                                            <QueryImage\n                                                data={data.swap_forex_formula_mobile}\n                                                alt={localize('Swap forex formula mobile')}\n                                            />\n                                        </Show.Mobile>\n                                        <FormulaText size=\"14px\">\n                                            <StyledOl>\n                                                <li>\n                                                    <span>\n                                                        <Localize translate_text=\"One standard lot for Forex = 100,000 units\" />\n                                                    </span>\n                                                </li>\n                                                <li>\n                                                    <span>\n                                                        <Localize translate_text=\"The point value is derivied from the current digits of the asset. In this example, the digit is 5, so the point value is 0.00001.\" />\n                                                    </span>\n                                                </li>\n                                                <li>\n                                                    <span>\n                                                        <Localize translate_text=\"If the swap rate is positive, your account will be credited with the swap amount. If it is negative, your account will be debited.\" />\n                                                    </span>\n                                                </li>\n                                            </StyledOl>\n                                        </FormulaText>\n\n                                        <Text mt=\"1.6rem\">\n                                            <Localize\n                                                translate_text=\"So you will require a swap charge of <0>0.24 USD</0> to keep the position open for one night.\"\n                                                components={[<strong key={0} />]}\n                                            />\n                                        </Text>\n                                    </AccordionItem>\n                                </Accordion>\n                                <LinkWrapper height=\"auto\">\n                                    <StyledLinkButton\n                                        tertiary=\"true\"\n                                        is_deriv_app_link\n                                        to=\"/mt5\"\n                                        external=\"true\"\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                    >\n                                        {localize('Go to DMT5 dashboard')}\n                                    </StyledLinkButton>\n                                    <StyledLinkButton\n                                        secondary=\"true\"\n                                        to=\"/trade-types/margin#swap-policy\"\n                                    >\n                                        {localize('Learn more about swap')}\n                                    </StyledLinkButton>\n                                </LinkWrapper>\n                            </RightContent>\n                        </ContentContainer>\n                    </>\n                )}\n            </StyledSection>\n        </>\n    )\n}\n\nexport default SwapCalculator\n","import React from 'react'\nimport { Hero } from '../common/_style'\nimport SwapCalculatorSection from './_swap-calculator'\nimport { Container, SEO } from 'components/containers'\nimport { Header } from 'components/elements'\nimport { localize, WithIntl } from 'components/localization'\nimport Layout from 'components/layout/layout'\n\nconst SwapCalculator = () => {\n    return (\n        <Layout>\n            <SEO title={localize('Swap Calculator')} description={localize('Swap Calculator')} />\n            <Hero jc=\"center\" ai=\"center\">\n                <Container>\n                    <Header as=\"h1\" type=\"display-title\" color=\"white\" align=\"center\">\n                        {localize('Swap Calculator')}\n                    </Header>\n                </Container>\n            </Hero>\n            <SwapCalculatorSection />\n        </Layout>\n    )\n}\nexport default WithIntl()(SwapCalculator)\n"],"sourceRoot":""}